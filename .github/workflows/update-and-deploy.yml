name: Update Lunch Data and Deploy


# This workflow now runs entirely from the main branch
# GitHub Pages should be configured to deploy from main branch /docs folder
on:
  schedule:
    # Run every day at 6:00 AM UTC (8:00 AM CEST)
    - cron: '0 6 * * 1-5'  # Monday to Friday only
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  scrape-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set Chrome environment variables for CI
      run: |
        echo "DISPLAY=:99" >> $GITHUB_ENV
        echo "CHROME_BIN=/usr/bin/google-chrome" >> $GITHUB_ENV
        echo "CHROMEDRIVER_PATH=/usr/local/bin/chromedriver" >> $GITHUB_ENV
        
    - name: Install Chrome and ChromeDriver (Fixed Version Approach)
      run: |
        # Install required packages
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip jq xvfb
        
        # Use fixed compatible versions that are proven to work
        CHROME_VERSION="114.0.5735.90"
        CHROMEDRIVER_VERSION="114.0.5735.90"
        
        echo "Installing Chrome version: ${CHROME_VERSION}"
        echo "Installing ChromeDriver version: ${CHROMEDRIVER_VERSION}"
        
        # Install Chrome with specific version
        wget --no-verbose -O /tmp/chrome.deb \
          "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb"
        sudo apt install -y /tmp/chrome.deb
        rm /tmp/chrome.deb
        
        # Install ChromeDriver with compatible version
        wget -O /tmp/chromedriver.zip \
          "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        rm /tmp/chromedriver.zip
        
        # Setup virtual display for headless Chrome
        sudo Xvfb :99 -ac -screen 0 1280x1024x24 &
        
        # Verify installations
        echo "Chrome version:"
        google-chrome --version
        echo "ChromeDriver version:"
        chromedriver --version
        
        # Test Chrome can start
        echo "Testing Chrome startup..."
        timeout 10s google-chrome --headless --disable-gpu --no-sandbox --dump-dom https://www.google.com > /dev/null || echo "Chrome test completed"
        
    - name: Get current day
      id: get-day
      run: |
        DAY=$(python -c "from utils.utils import get_today_english; print(get_today_english().lower())")
        echo "day=$DAY" >> $GITHUB_OUTPUT
        echo "Current day: $DAY"
        
    - name: Scrape lunch data for current day with error handling
      run: |
        echo "Scraping data for: ${{ steps.get-day.outputs.day }}"
        
        # Try scraping with retries
        for attempt in {1..3}; do
          echo "Attempt $attempt of 3..."
          if python main.py --day ${{ steps.get-day.outputs.day }} --refresh; then
            echo "Scraping successful on attempt $attempt"
            break
          else
            echo "Scraping failed on attempt $attempt"
            if [ $attempt -eq 3 ]; then
              echo "All scraping attempts failed. Checking if we have existing data..."
              if [ -f "data/lunch_data_${{ steps.get-day.outputs.day }}.json" ]; then
                echo "Using existing data from previous run"
              else
                echo "No existing data found. Scraping completely failed."
                exit 1
              fi
            else
              echo "Waiting 10 seconds before retry..."
              sleep 10
            fi
          fi
        done
        
    - name: Generate fresh HTML page
      run: |
        echo "Generating fresh HTML page for the current day"
        python generate_html.py
        
    - name: Copy files to deployment directory
      run: |
        # Ensure CNAME is in docs directory for custom domain
        if [ -f CNAME ]; then
          cp CNAME docs/
        fi
        
        # The generate_html.py script already creates both index.html and docs/index.html
        # No need to copy manually as it's already done by the script
        echo "HTML files already generated by generate_html.py script"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Pull latest changes to avoid conflicts
        git pull origin main --no-edit || echo "Pull failed, continuing..."
        
        git add data/ docs/ index.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update: ${{ steps.get-day.outputs.day }} lunch data $(date +'%Y-%m-%d %H:%M')"
          
          # Try to push, with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "Push successful on attempt $i"
              break
            else
              echo "Push failed on attempt $i, trying to pull and retry..."
              git pull origin main --no-edit --strategy-option=ours || echo "Pull failed"
              if [ $i -eq 3 ]; then
                echo "All push attempts failed"
                exit 1
              fi
            fi
          done
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: scrape-and-build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 